#ifndef AVX_STUFF_H
#define AVX_STUFF_H

#include "parameters.h"
#include "stdalign.h"
#include "immintrin.h"
#include "F256Field.h"


//used for timing stuff
static inline
uint64_t rdtsc(){
    unsigned int lo,hi;
    __asm__ __volatile__ ("rdtsc" : "=a" (lo), "=d" (hi));
    return ((uint64_t)hi << 32) | lo;
}
#define TIC printf("\n"); uint64_t cl = rdtsc();
#define TOC(A) printf("%s cycles = %llu \n",#A ,rdtsc() - cl); cl = rdtsc();

//used for printing stuff
static inline
void print256_num32(__m256i var)
{
    uint32_t *val = (uint32_t*) &var;
    printf("Numerical: %i %i %i %i %i %i %i %i \n", 
           val[0], val[1], val[2], val[3], val[4], val[5], 
           val[6], val[7]);
}

static inline
void print256_num8(__m256i var)
{
    uint8_t *val = (uint8_t*) &var;
    printf("Numerical: %3i %3i %3i %3i %3i %3i %3i %3i | %3i %3i %3i %3i %3i %3i %3i %3i | %3i %3i %3i %3i %3i %3i %3i %3i | %3i %3i %3i %3i %3i %3i %3i %3i \n", 
           val[0],  val[1],  val[2],  val[3],  val[4],  val[5],  val[6],  val[7], 
           val[8],  val[9],  val[10], val[11], val[12], val[13], val[14], val[15],
           val[16], val[17], val[18], val[19], val[20], val[21], val[22], val[23],
           val[24], val[25], val[26], val[27], val[28], val[29], val[30], val[31]);
}

/*
	Given a vector V of OIL_VARS field elements, a field element a, and a vector of OIL_VARS bits b (i.e. a bitcontainer)
	compute the scalar product of b by a ans add it to V. 
	The output is permuted
*/
static inline 
void addScalarProductAVX(__m256i *V, FELT a, bitcontainer b) {
	alignas (32) static const char mask1List[32] = {1,1,1,1,2,2,2,2,4,4,4,4,8,8,8,8,16,16,16,16,32,32,32,32,64,64,64,64,128,128,128,128};
	__m256i mask1 = _mm256_load_si256((__m256i*)mask1List);

	// repeat a 32 times
	__m256i aa = _mm256_set1_epi8(a);

	// split b up in uint32_t's
#if OIL_VARS <=64
	uint32_t b32[2];
	b32[0] = b&0xFFFFFFFF;
	b32[1] = b>>32;
#elif (OIL_VARS >= 64)
	alignas(16) uint32_t b32[4];
	_mm_store_si128((__m128i*)b32,b); 
#endif

	__m256i avx1 = _mm256_set1_epi32(b32[0]);
	avx1 = _mm256_and_si256(avx1,mask1);
	avx1 = _mm256_cmpeq_epi8(avx1,_mm256_setzero_si256());
	avx1 = _mm256_andnot_si256(avx1,aa);
	V[0] ^= avx1;

	__m256i avx2 = _mm256_set1_epi32(b32[1]);
	avx2 = _mm256_and_si256(avx2,mask1);
	avx2 = _mm256_cmpeq_epi8(avx2,_mm256_setzero_si256());
	avx2 = _mm256_andnot_si256(avx2,aa);
	V[1] ^= avx2;

#if OIL_VARS > 64
	__m256i avx3 = _mm256_set1_epi32(b32[2]);
	avx3 = _mm256_and_si256(avx3,mask1);
	avx3 = _mm256_cmpeq_epi8(avx3,_mm256_setzero_si256());
	avx3 = _mm256_andnot_si256(avx3,aa);
	V[2] ^= avx3;
#endif
#if OIL_VARS > 96
	__m256i avx4 = _mm256_set1_epi32(b32[3]);
	avx4 = _mm256_and_si256(avx4,mask1);
	avx4 = _mm256_cmpeq_epi8(avx4,_mm256_setzero_si256());
	avx4 = _mm256_andnot_si256(avx4,aa);
	V[3] ^= avx4;
#endif

}

/*
	3 times addScalarProductAVX:
	Given 3 vectors V1,V2 and V3 of OIL_VARS field elements, 3 field element a1,a2 and a3, and a vector of OIL_VARS bits b (i.e. a bitcontainer)
	compute the scalar products of b by a1,a2 and a3, and these to V1,V2, and V3 respectively.
	The output is permuted
*/
static inline
void addScalarProduct3AVX(__m256i *V1, FELT a1, __m256i *V2, FELT a2, __m256i *V3, FELT a3, const bitcontainer b) {
	alignas (32) static const char mask1List[32] = {1,1,1,1,2,2,2,2,4,4,4,4,8,8,8,8,16,16,16,16,32,32,32,32,64,64,64,64,128,128,128,128};
	__m256i mask1 = _mm256_loadu_si256((__m256i*)mask1List);

	__m256i a1a1 = _mm256_set1_epi8(a1);
	__m256i a2a2 = _mm256_set1_epi8(a2);
	__m256i a3a3 = _mm256_set1_epi8(a3);

#if OIL_VARS <=64
	uint32_t b32[2];
    b32[0] = b&0xFFFFFFFF;
	b32[1] = b>>32;
#elif (OIL_VARS > 64) 
	alignas(16) uint32_t b32[4];
	_mm_store_si128((__m128i*)b32,b); 
#endif

	__m256i avx1 = _mm256_set1_epi32(b32[0]);
	avx1 = _mm256_and_si256(avx1,mask1);
	avx1 = _mm256_cmpeq_epi8(avx1,_mm256_setzero_si256());
	V1[0] = _mm256_xor_si256(V1[0],_mm256_andnot_si256(avx1,a1a1));
	V2[0] = _mm256_xor_si256(V2[0],_mm256_andnot_si256(avx1,a2a2));
	V3[0] = _mm256_xor_si256(V3[0],_mm256_andnot_si256(avx1,a3a3));
	
	__m256i avx2 = _mm256_set1_epi32(b32[1]);
	avx2 = _mm256_and_si256(avx2,mask1);
	avx2 = _mm256_cmpeq_epi8(avx2,_mm256_setzero_si256());
	V1[1] = _mm256_xor_si256(V1[1],_mm256_andnot_si256(avx2,a1a1));
	V2[1] = _mm256_xor_si256(V2[1],_mm256_andnot_si256(avx2,a2a2));
	V3[1] = _mm256_xor_si256(V3[1],_mm256_andnot_si256(avx2,a3a3));
	
#if OIL_VARS > 64
	__m256i avx3 = _mm256_set1_epi32(b32[2]);
	avx3 = _mm256_and_si256(avx3,mask1);
	avx3 = _mm256_cmpeq_epi8(avx3,_mm256_setzero_si256());
	V1[2] = _mm256_xor_si256(V1[2],_mm256_andnot_si256(avx3,a1a1));
	V2[2] = _mm256_xor_si256(V2[2],_mm256_andnot_si256(avx3,a2a2));
	V3[2] = _mm256_xor_si256(V3[2],_mm256_andnot_si256(avx3,a3a3));
#endif

#if OIL_VARS > 96
	__m256i avx4 = _mm256_set1_epi32(b32[3]);
	avx4 = _mm256_and_si256(avx4,mask1);
	avx4 = _mm256_cmpeq_epi8(avx4,_mm256_setzero_si256());
	V1[3] = _mm256_xor_si256(V1[3],_mm256_andnot_si256(avx4,a1a1));
	V2[3] = _mm256_xor_si256(V2[3],_mm256_andnot_si256(avx4,a2a2));
	V3[3] = _mm256_xor_si256(V3[3],_mm256_andnot_si256(avx4,a3a3));
#endif
}

#define REPEAT8(A) A, A, A, A, A, A, A, A
#define REPEAT32(A) REPEAT8(A), REPEAT8(A), REPEAT8(A), REPEAT8(A)

/*
	Given U, 256 coefficients, and 4 field elements a[0],...,a[3], this function computes a[0]*U[0:63] , ... , a[3]*U[192:255], 
	and adds them to O (in a permuted way).
*/
static inline 
void addScalarProduct4AVX(__m256i *O, FELT *a, __m256i U) {
	static const char maskList[32*8] = {REPEAT32(1), REPEAT32(2), REPEAT32(4), REPEAT32(8), REPEAT32(16), REPEAT32(32), REPEAT32(64), REPEAT32(128)};
	__m256i *masks = (__m256i *)&maskList;

#if OIL_VARS <= 64
	static const char shuffleList[32] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3};
	__m256i A = _mm256_set1_epi32(*((uint32_t *)a));
#elif (OIL_VARS > 64) 
	static const char shuffleList[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
	__m256i A = _mm256_set1_epi16(*((uint16_t *)a));
#endif
	__m256i *shuffle = (__m256i *)&shuffleList;
	__m256i aa = _mm256_shuffle_epi8(A,*shuffle);

	int i;
	for (i=0 ; i<8 ; i++){
		__m256i Temp = _mm256_and_si256(U,masks[i]);
		Temp = _mm256_cmpeq_epi8(Temp,_mm256_setzero_si256());
		Temp = _mm256_andnot_si256(Temp,aa);
		O[i] = _mm256_xor_si256(O[i],Temp);
	}	
}


/*
	Given a __m256i value A that contains 32 field elemtents and a field element b, this function computes the scalar multiplication A*b and adds it to Out.
*/
static inline
void scalarMul(__m256i *Out, __m256i A, FELT b){
	alignas (32) static unsigned char table[256*2*32] = {
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,   0, 16, 32, 48, 64, 80, 96,112,  0, 16, 32, 48, 64, 80, 96,112,  0, 16, 32, 48, 64, 80, 96,112,  0, 16, 32, 48, 64, 80, 96,112,
  0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,  0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,   0, 32, 64, 96,  3, 35, 67, 99,  0, 32, 64, 96,  3, 35, 67, 99,  0, 32, 64, 96,  3, 35, 67, 99,  0, 32, 64, 96,  3, 35, 67, 99,
  0,  3,  6,  5, 12, 15, 10,  9, 24, 27, 30, 29, 20, 23, 18, 17,  0,  3,  6,  5, 12, 15, 10,  9, 24, 27, 30, 29, 20, 23, 18, 17,   0, 48, 96, 80, 67,115, 35, 19,  0, 48, 96, 80, 67,115, 35, 19,  0, 48, 96, 80, 67,115, 35, 19,  0, 48, 96, 80, 67,115, 35, 19,
  0,  4,  8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60,  0,  4,  8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60,   0, 64,  3, 67,  6, 70,  5, 69,  0, 64,  3, 67,  6, 70,  5, 69,  0, 64,  3, 67,  6, 70,  5, 69,  0, 64,  3, 67,  6, 70,  5, 69,
  0,  5, 10, 15, 20, 17, 30, 27, 40, 45, 34, 39, 60, 57, 54, 51,  0,  5, 10, 15, 20, 17, 30, 27, 40, 45, 34, 39, 60, 57, 54, 51,   0, 80, 35,115, 70, 22,101, 53,  0, 80, 35,115, 70, 22,101, 53,  0, 80, 35,115, 70, 22,101, 53,  0, 80, 35,115, 70, 22,101, 53,
  0,  6, 12, 10, 24, 30, 20, 18, 48, 54, 60, 58, 40, 46, 36, 34,  0,  6, 12, 10, 24, 30, 20, 18, 48, 54, 60, 58, 40, 46, 36, 34,   0, 96, 67, 35,  5,101, 70, 38,  0, 96, 67, 35,  5,101, 70, 38,  0, 96, 67, 35,  5,101, 70, 38,  0, 96, 67, 35,  5,101, 70, 38,
  0,  7, 14,  9, 28, 27, 18, 21, 56, 63, 54, 49, 36, 35, 42, 45,  0,  7, 14,  9, 28, 27, 18, 21, 56, 63, 54, 49, 36, 35, 42, 45,   0,112, 99, 19, 69, 53, 38, 86,  0,112, 99, 19, 69, 53, 38, 86,  0,112, 99, 19, 69, 53, 38, 86,  0,112, 99, 19, 69, 53, 38, 86,
  0,  8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96,104,112,120,  0,  8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96,104,112,120,   0,  3,  6,  5, 12, 15, 10,  9,  0,  3,  6,  5, 12, 15, 10,  9,  0,  3,  6,  5, 12, 15, 10,  9,  0,  3,  6,  5, 12, 15, 10,  9,
  0,  9, 18, 27, 36, 45, 54, 63, 72, 65, 90, 83,108,101,126,119,  0,  9, 18, 27, 36, 45, 54, 63, 72, 65, 90, 83,108,101,126,119,   0, 19, 38, 53, 76, 95,106,121,  0, 19, 38, 53, 76, 95,106,121,  0, 19, 38, 53, 76, 95,106,121,  0, 19, 38, 53, 76, 95,106,121,
  0, 10, 20, 30, 40, 34, 60, 54, 80, 90, 68, 78,120,114,108,102,  0, 10, 20, 30, 40, 34, 60, 54, 80, 90, 68, 78,120,114,108,102,   0, 35, 70,101, 15, 44, 73,106,  0, 35, 70,101, 15, 44, 73,106,  0, 35, 70,101, 15, 44, 73,106,  0, 35, 70,101, 15, 44, 73,106,
  0, 11, 22, 29, 44, 39, 58, 49, 88, 83, 78, 69,116,127, 98,105,  0, 11, 22, 29, 44, 39, 58, 49, 88, 83, 78, 69,116,127, 98,105,   0, 51,102, 85, 79,124, 41, 26,  0, 51,102, 85, 79,124, 41, 26,  0, 51,102, 85, 79,124, 41, 26,  0, 51,102, 85, 79,124, 41, 26,
  0, 12, 24, 20, 48, 60, 40, 36, 96,108,120,116, 80, 92, 72, 68,  0, 12, 24, 20, 48, 60, 40, 36, 96,108,120,116, 80, 92, 72, 68,   0, 67,  5, 70, 10, 73, 15, 76,  0, 67,  5, 70, 10, 73, 15, 76,  0, 67,  5, 70, 10, 73, 15, 76,  0, 67,  5, 70, 10, 73, 15, 76,
  0, 13, 26, 23, 52, 57, 46, 35,104,101,114,127, 92, 81, 70, 75,  0, 13, 26, 23, 52, 57, 46, 35,104,101,114,127, 92, 81, 70, 75,   0, 83, 37,118, 74, 25,111, 60,  0, 83, 37,118, 74, 25,111, 60,  0, 83, 37,118, 74, 25,111, 60,  0, 83, 37,118, 74, 25,111, 60,
  0, 14, 28, 18, 56, 54, 36, 42,112,126,108, 98, 72, 70, 84, 90,  0, 14, 28, 18, 56, 54, 36, 42,112,126,108, 98, 72, 70, 84, 90,   0, 99, 69, 38,  9,106, 76, 47,  0, 99, 69, 38,  9,106, 76, 47,  0, 99, 69, 38,  9,106, 76, 47,  0, 99, 69, 38,  9,106, 76, 47,
  0, 15, 30, 17, 60, 51, 34, 45,120,119,102,105, 68, 75, 90, 85,  0, 15, 30, 17, 60, 51, 34, 45,120,119,102,105, 68, 75, 90, 85,   0,115,101, 22, 73, 58, 44, 95,  0,115,101, 22, 73, 58, 44, 95,  0,115,101, 22, 73, 58, 44, 95,  0,115,101, 22, 73, 58, 44, 95,
  0, 16, 32, 48, 64, 80, 96,112,  3, 19, 35, 51, 67, 83, 99,115,  0, 16, 32, 48, 64, 80, 96,112,  3, 19, 35, 51, 67, 83, 99,115,   0,  6, 12, 10, 24, 30, 20, 18,  0,  6, 12, 10, 24, 30, 20, 18,  0,  6, 12, 10, 24, 30, 20, 18,  0,  6, 12, 10, 24, 30, 20, 18,
  0, 17, 34, 51, 68, 85,102,119, 11, 26, 41, 56, 79, 94,109,124,  0, 17, 34, 51, 68, 85,102,119, 11, 26, 41, 56, 79, 94,109,124,   0, 22, 44, 58, 88, 78,116, 98,  0, 22, 44, 58, 88, 78,116, 98,  0, 22, 44, 58, 88, 78,116, 98,  0, 22, 44, 58, 88, 78,116, 98,
  0, 18, 36, 54, 72, 90,108,126, 19,  1, 55, 37, 91, 73,127,109,  0, 18, 36, 54, 72, 90,108,126, 19,  1, 55, 37, 91, 73,127,109,   0, 38, 76,106, 27, 61, 87,113,  0, 38, 76,106, 27, 61, 87,113,  0, 38, 76,106, 27, 61, 87,113,  0, 38, 76,106, 27, 61, 87,113,
  0, 19, 38, 53, 76, 95,106,121, 27,  8, 61, 46, 87, 68,113, 98,  0, 19, 38, 53, 76, 95,106,121, 27,  8, 61, 46, 87, 68,113, 98,   0, 54,108, 90, 91,109, 55,  1,  0, 54,108, 90, 91,109, 55,  1,  0, 54,108, 90, 91,109, 55,  1,  0, 54,108, 90, 91,109, 55,  1,
  0, 20, 40, 60, 80, 68,120,108, 35, 55, 11, 31,115,103, 91, 79,  0, 20, 40, 60, 80, 68,120,108, 35, 55, 11, 31,115,103, 91, 79,   0, 70, 15, 73, 30, 88, 17, 87,  0, 70, 15, 73, 30, 88, 17, 87,  0, 70, 15, 73, 30, 88, 17, 87,  0, 70, 15, 73, 30, 88, 17, 87,
  0, 21, 42, 63, 84, 65,126,107, 43, 62,  1, 20,127,106, 85, 64,  0, 21, 42, 63, 84, 65,126,107, 43, 62,  1, 20,127,106, 85, 64,   0, 86, 47,121, 94,  8,113, 39,  0, 86, 47,121, 94,  8,113, 39,  0, 86, 47,121, 94,  8,113, 39,  0, 86, 47,121, 94,  8,113, 39,
  0, 22, 44, 58, 88, 78,116, 98, 51, 37, 31,  9,107,125, 71, 81,  0, 22, 44, 58, 88, 78,116, 98, 51, 37, 31,  9,107,125, 71, 81,   0,102, 79, 41, 29,123, 82, 52,  0,102, 79, 41, 29,123, 82, 52,  0,102, 79, 41, 29,123, 82, 52,  0,102, 79, 41, 29,123, 82, 52,
  0, 23, 46, 57, 92, 75,114,101, 59, 44, 21,  2,103,112, 73, 94,  0, 23, 46, 57, 92, 75,114,101, 59, 44, 21,  2,103,112, 73, 94,   0,118,111, 25, 93, 43, 50, 68,  0,118,111, 25, 93, 43, 50, 68,  0,118,111, 25, 93, 43, 50, 68,  0,118,111, 25, 93, 43, 50, 68,
  0, 24, 48, 40, 96,120, 80, 72, 67, 91,115,107, 35, 59, 19, 11,  0, 24, 48, 40, 96,120, 80, 72, 67, 91,115,107, 35, 59, 19, 11,   0,  5, 10, 15, 20, 17, 30, 27,  0,  5, 10, 15, 20, 17, 30, 27,  0,  5, 10, 15, 20, 17, 30, 27,  0,  5, 10, 15, 20, 17, 30, 27,
  0, 25, 50, 43,100,125, 86, 79, 75, 82,121, 96, 47, 54, 29,  4,  0, 25, 50, 43,100,125, 86, 79, 75, 82,121, 96, 47, 54, 29,  4,   0, 21, 42, 63, 84, 65,126,107,  0, 21, 42, 63, 84, 65,126,107,  0, 21, 42, 63, 84, 65,126,107,  0, 21, 42, 63, 84, 65,126,107,
  0, 26, 52, 46,104,114, 92, 70, 83, 73,103,125, 59, 33, 15, 21,  0, 26, 52, 46,104,114, 92, 70, 83, 73,103,125, 59, 33, 15, 21,   0, 37, 74,111, 23, 50, 93,120,  0, 37, 74,111, 23, 50, 93,120,  0, 37, 74,111, 23, 50, 93,120,  0, 37, 74,111, 23, 50, 93,120,
  0, 27, 54, 45,108,119, 90, 65, 91, 64,109,118, 55, 44,  1, 26,  0, 27, 54, 45,108,119, 90, 65, 91, 64,109,118, 55, 44,  1, 26,   0, 53,106, 95, 87, 98, 61,  8,  0, 53,106, 95, 87, 98, 61,  8,  0, 53,106, 95, 87, 98, 61,  8,  0, 53,106, 95, 87, 98, 61,  8,
  0, 28, 56, 36,112,108, 72, 84, 99,127, 91, 71, 19, 15, 43, 55,  0, 28, 56, 36,112,108, 72, 84, 99,127, 91, 71, 19, 15, 43, 55,   0, 69,  9, 76, 18, 87, 27, 94,  0, 69,  9, 76, 18, 87, 27, 94,  0, 69,  9, 76, 18, 87, 27, 94,  0, 69,  9, 76, 18, 87, 27, 94,
  0, 29, 58, 39,116,105, 78, 83,107,118, 81, 76, 31,  2, 37, 56,  0, 29, 58, 39,116,105, 78, 83,107,118, 81, 76, 31,  2, 37, 56,   0, 85, 41,124, 82,  7,123, 46,  0, 85, 41,124, 82,  7,123, 46,  0, 85, 41,124, 82,  7,123, 46,  0, 85, 41,124, 82,  7,123, 46,
  0, 30, 60, 34,120,102, 68, 90,115,109, 79, 81, 11, 21, 55, 41,  0, 30, 60, 34,120,102, 68, 90,115,109, 79, 81, 11, 21, 55, 41,   0,101, 73, 44, 17,116, 88, 61,  0,101, 73, 44, 17,116, 88, 61,  0,101, 73, 44, 17,116, 88, 61,  0,101, 73, 44, 17,116, 88, 61,
  0, 31, 62, 33,124, 99, 66, 93,123,100, 69, 90,  7, 24, 57, 38,  0, 31, 62, 33,124, 99, 66, 93,123,100, 69, 90,  7, 24, 57, 38,   0,117,105, 28, 81, 36, 56, 77,  0,117,105, 28, 81, 36, 56, 77,  0,117,105, 28, 81, 36, 56, 77,  0,117,105, 28, 81, 36, 56, 77,
  0, 32, 64, 96,  3, 35, 67, 99,  6, 38, 70,102,  5, 37, 69,101,  0, 32, 64, 96,  3, 35, 67, 99,  6, 38, 70,102,  5, 37, 69,101,   0, 12, 24, 20, 48, 60, 40, 36,  0, 12, 24, 20, 48, 60, 40, 36,  0, 12, 24, 20, 48, 60, 40, 36,  0, 12, 24, 20, 48, 60, 40, 36,
  0, 33, 66, 99,  7, 38, 69,100, 14, 47, 76,109,  9, 40, 75,106,  0, 33, 66, 99,  7, 38, 69,100, 14, 47, 76,109,  9, 40, 75,106,   0, 28, 56, 36,112,108, 72, 84,  0, 28, 56, 36,112,108, 72, 84,  0, 28, 56, 36,112,108, 72, 84,  0, 28, 56, 36,112,108, 72, 84,
  0, 34, 68,102, 11, 41, 79,109, 22, 52, 82,112, 29, 63, 89,123,  0, 34, 68,102, 11, 41, 79,109, 22, 52, 82,112, 29, 63, 89,123,   0, 44, 88,116, 51, 31,107, 71,  0, 44, 88,116, 51, 31,107, 71,  0, 44, 88,116, 51, 31,107, 71,  0, 44, 88,116, 51, 31,107, 71,
  0, 35, 70,101, 15, 44, 73,106, 30, 61, 88,123, 17, 50, 87,116,  0, 35, 70,101, 15, 44, 73,106, 30, 61, 88,123, 17, 50, 87,116,   0, 60,120, 68,115, 79, 11, 55,  0, 60,120, 68,115, 79, 11, 55,  0, 60,120, 68,115, 79, 11, 55,  0, 60,120, 68,115, 79, 11, 55,
  0, 36, 72,108, 19, 55, 91,127, 38,  2,110, 74, 53, 17,125, 89,  0, 36, 72,108, 19, 55, 91,127, 38,  2,110, 74, 53, 17,125, 89,   0, 76, 27, 87, 54,122, 45, 97,  0, 76, 27, 87, 54,122, 45, 97,  0, 76, 27, 87, 54,122, 45, 97,  0, 76, 27, 87, 54,122, 45, 97,
  0, 37, 74,111, 23, 50, 93,120, 46, 11,100, 65, 57, 28,115, 86,  0, 37, 74,111, 23, 50, 93,120, 46, 11,100, 65, 57, 28,115, 86,   0, 92, 59,103,118, 42, 77, 17,  0, 92, 59,103,118, 42, 77, 17,  0, 92, 59,103,118, 42, 77, 17,  0, 92, 59,103,118, 42, 77, 17,
  0, 38, 76,106, 27, 61, 87,113, 54, 16,122, 92, 45, 11, 97, 71,  0, 38, 76,106, 27, 61, 87,113, 54, 16,122, 92, 45, 11, 97, 71,   0,108, 91, 55, 53, 89,110,  2,  0,108, 91, 55, 53, 89,110,  2,  0,108, 91, 55, 53, 89,110,  2,  0,108, 91, 55, 53, 89,110,  2,
  0, 39, 78,105, 31, 56, 81,118, 62, 25,112, 87, 33,  6,111, 72,  0, 39, 78,105, 31, 56, 81,118, 62, 25,112, 87, 33,  6,111, 72,   0,124,123,  7,117,  9, 14,114,  0,124,123,  7,117,  9, 14,114,  0,124,123,  7,117,  9, 14,114,  0,124,123,  7,117,  9, 14,114,
  0, 40, 80,120, 35, 11,115, 91, 70,110, 22, 62,101, 77, 53, 29,  0, 40, 80,120, 35, 11,115, 91, 70,110, 22, 62,101, 77, 53, 29,   0, 15, 30, 17, 60, 51, 34, 45,  0, 15, 30, 17, 60, 51, 34, 45,  0, 15, 30, 17, 60, 51, 34, 45,  0, 15, 30, 17, 60, 51, 34, 45,
  0, 41, 82,123, 39, 14,117, 92, 78,103, 28, 53,105, 64, 59, 18,  0, 41, 82,123, 39, 14,117, 92, 78,103, 28, 53,105, 64, 59, 18,   0, 31, 62, 33,124, 99, 66, 93,  0, 31, 62, 33,124, 99, 66, 93,  0, 31, 62, 33,124, 99, 66, 93,  0, 31, 62, 33,124, 99, 66, 93,
  0, 42, 84,126, 43,  1,127, 85, 86,124,  2, 40,125, 87, 41,  3,  0, 42, 84,126, 43,  1,127, 85, 86,124,  2, 40,125, 87, 41,  3,   0, 47, 94,113, 63, 16, 97, 78,  0, 47, 94,113, 63, 16, 97, 78,  0, 47, 94,113, 63, 16, 97, 78,  0, 47, 94,113, 63, 16, 97, 78,
  0, 43, 86,125, 47,  4,121, 82, 94,117,  8, 35,113, 90, 39, 12,  0, 43, 86,125, 47,  4,121, 82, 94,117,  8, 35,113, 90, 39, 12,   0, 63,126, 65,127, 64,  1, 62,  0, 63,126, 65,127, 64,  1, 62,  0, 63,126, 65,127, 64,  1, 62,  0, 63,126, 65,127, 64,  1, 62,
  0, 44, 88,116, 51, 31,107, 71,102, 74, 62, 18, 85,121, 13, 33,  0, 44, 88,116, 51, 31,107, 71,102, 74, 62, 18, 85,121, 13, 33,   0, 79, 29, 82, 58,117, 39,104,  0, 79, 29, 82, 58,117, 39,104,  0, 79, 29, 82, 58,117, 39,104,  0, 79, 29, 82, 58,117, 39,104,
  0, 45, 90,119, 55, 26,109, 64,110, 67, 52, 25, 89,116,  3, 46,  0, 45, 90,119, 55, 26,109, 64,110, 67, 52, 25, 89,116,  3, 46,   0, 95, 61, 98,122, 37, 71, 24,  0, 95, 61, 98,122, 37, 71, 24,  0, 95, 61, 98,122, 37, 71, 24,  0, 95, 61, 98,122, 37, 71, 24,
  0, 46, 92,114, 59, 21,103, 73,118, 88, 42,  4, 77, 99, 17, 63,  0, 46, 92,114, 59, 21,103, 73,118, 88, 42,  4, 77, 99, 17, 63,   0,111, 93, 50, 57, 86,100, 11,  0,111, 93, 50, 57, 86,100, 11,  0,111, 93, 50, 57, 86,100, 11,  0,111, 93, 50, 57, 86,100, 11,
  0, 47, 94,113, 63, 16, 97, 78,126, 81, 32, 15, 65,110, 31, 48,  0, 47, 94,113, 63, 16, 97, 78,126, 81, 32, 15, 65,110, 31, 48,   0,127,125,  2,121,  6,  4,123,  0,127,125,  2,121,  6,  4,123,  0,127,125,  2,121,  6,  4,123,  0,127,125,  2,121,  6,  4,123,
  0, 48, 96, 80, 67,115, 35, 19,  5, 53,101, 85, 70,118, 38, 22,  0, 48, 96, 80, 67,115, 35, 19,  5, 53,101, 85, 70,118, 38, 22,   0, 10, 20, 30, 40, 34, 60, 54,  0, 10, 20, 30, 40, 34, 60, 54,  0, 10, 20, 30, 40, 34, 60, 54,  0, 10, 20, 30, 40, 34, 60, 54,
  0, 49, 98, 83, 71,118, 37, 20, 13, 60,111, 94, 74,123, 40, 25,  0, 49, 98, 83, 71,118, 37, 20, 13, 60,111, 94, 74,123, 40, 25,   0, 26, 52, 46,104,114, 92, 70,  0, 26, 52, 46,104,114, 92, 70,  0, 26, 52, 46,104,114, 92, 70,  0, 26, 52, 46,104,114, 92, 70,
  0, 50,100, 86, 75,121, 47, 29, 21, 39,113, 67, 94,108, 58,  8,  0, 50,100, 86, 75,121, 47, 29, 21, 39,113, 67, 94,108, 58,  8,   0, 42, 84,126, 43,  1,127, 85,  0, 42, 84,126, 43,  1,127, 85,  0, 42, 84,126, 43,  1,127, 85,  0, 42, 84,126, 43,  1,127, 85,
  0, 51,102, 85, 79,124, 41, 26, 29, 46,123, 72, 82, 97, 52,  7,  0, 51,102, 85, 79,124, 41, 26, 29, 46,123, 72, 82, 97, 52,  7,   0, 58,116, 78,107, 81, 31, 37,  0, 58,116, 78,107, 81, 31, 37,  0, 58,116, 78,107, 81, 31, 37,  0, 58,116, 78,107, 81, 31, 37,
  0, 52,104, 92, 83,103, 59, 15, 37, 17, 77,121,118, 66, 30, 42,  0, 52,104, 92, 83,103, 59, 15, 37, 17, 77,121,118, 66, 30, 42,   0, 74, 23, 93, 46,100, 57,115,  0, 74, 23, 93, 46,100, 57,115,  0, 74, 23, 93, 46,100, 57,115,  0, 74, 23, 93, 46,100, 57,115,
  0, 53,106, 95, 87, 98, 61,  8, 45, 24, 71,114,122, 79, 16, 37,  0, 53,106, 95, 87, 98, 61,  8, 45, 24, 71,114,122, 79, 16, 37,   0, 90, 55,109,110, 52, 89,  3,  0, 90, 55,109,110, 52, 89,  3,  0, 90, 55,109,110, 52, 89,  3,  0, 90, 55,109,110, 52, 89,  3,
  0, 54,108, 90, 91,109, 55,  1, 53,  3, 89,111,110, 88,  2, 52,  0, 54,108, 90, 91,109, 55,  1, 53,  3, 89,111,110, 88,  2, 52,   0,106, 87, 61, 45, 71,122, 16,  0,106, 87, 61, 45, 71,122, 16,  0,106, 87, 61, 45, 71,122, 16,  0,106, 87, 61, 45, 71,122, 16,
  0, 55,110, 89, 95,104, 49,  6, 61, 10, 83,100, 98, 85, 12, 59,  0, 55,110, 89, 95,104, 49,  6, 61, 10, 83,100, 98, 85, 12, 59,   0,122,119, 13,109, 23, 26, 96,  0,122,119, 13,109, 23, 26, 96,  0,122,119, 13,109, 23, 26, 96,  0,122,119, 13,109, 23, 26, 96,
  0, 56,112, 72, 99, 91, 19, 43, 69,125, 53, 13, 38, 30, 86,110,  0, 56,112, 72, 99, 91, 19, 43, 69,125, 53, 13, 38, 30, 86,110,   0,  9, 18, 27, 36, 45, 54, 63,  0,  9, 18, 27, 36, 45, 54, 63,  0,  9, 18, 27, 36, 45, 54, 63,  0,  9, 18, 27, 36, 45, 54, 63,
  0, 57,114, 75,103, 94, 21, 44, 77,116, 63,  6, 42, 19, 88, 97,  0, 57,114, 75,103, 94, 21, 44, 77,116, 63,  6, 42, 19, 88, 97,   0, 25, 50, 43,100,125, 86, 79,  0, 25, 50, 43,100,125, 86, 79,  0, 25, 50, 43,100,125, 86, 79,  0, 25, 50, 43,100,125, 86, 79,
  0, 58,116, 78,107, 81, 31, 37, 85,111, 33, 27, 62,  4, 74,112,  0, 58,116, 78,107, 81, 31, 37, 85,111, 33, 27, 62,  4, 74,112,   0, 41, 82,123, 39, 14,117, 92,  0, 41, 82,123, 39, 14,117, 92,  0, 41, 82,123, 39, 14,117, 92,  0, 41, 82,123, 39, 14,117, 92,
  0, 59,118, 77,111, 84, 25, 34, 93,102, 43, 16, 50,  9, 68,127,  0, 59,118, 77,111, 84, 25, 34, 93,102, 43, 16, 50,  9, 68,127,   0, 57,114, 75,103, 94, 21, 44,  0, 57,114, 75,103, 94, 21, 44,  0, 57,114, 75,103, 94, 21, 44,  0, 57,114, 75,103, 94, 21, 44,
  0, 60,120, 68,115, 79, 11, 55,101, 89, 29, 33, 22, 42,110, 82,  0, 60,120, 68,115, 79, 11, 55,101, 89, 29, 33, 22, 42,110, 82,   0, 73, 17, 88, 34,107, 51,122,  0, 73, 17, 88, 34,107, 51,122,  0, 73, 17, 88, 34,107, 51,122,  0, 73, 17, 88, 34,107, 51,122,
  0, 61,122, 71,119, 74, 13, 48,109, 80, 23, 42, 26, 39, 96, 93,  0, 61,122, 71,119, 74, 13, 48,109, 80, 23, 42, 26, 39, 96, 93,   0, 89, 49,104, 98, 59, 83, 10,  0, 89, 49,104, 98, 59, 83, 10,  0, 89, 49,104, 98, 59, 83, 10,  0, 89, 49,104, 98, 59, 83, 10,
  0, 62,124, 66,123, 69,  7, 57,117, 75,  9, 55, 14, 48,114, 76,  0, 62,124, 66,123, 69,  7, 57,117, 75,  9, 55, 14, 48,114, 76,   0,105, 81, 56, 33, 72,112, 25,  0,105, 81, 56, 33, 72,112, 25,  0,105, 81, 56, 33, 72,112, 25,  0,105, 81, 56, 33, 72,112, 25,
  0, 63,126, 65,127, 64,  1, 62,125, 66,  3, 60,  2, 61,124, 67,  0, 63,126, 65,127, 64,  1, 62,125, 66,  3, 60,  2, 61,124, 67,   0,121,113,  8, 97, 24, 16,105,  0,121,113,  8, 97, 24, 16,105,  0,121,113,  8, 97, 24, 16,105,  0,121,113,  8, 97, 24, 16,105,
  0, 64,  3, 67,  6, 70,  5, 69, 12, 76, 15, 79, 10, 74,  9, 73,  0, 64,  3, 67,  6, 70,  5, 69, 12, 76, 15, 79, 10, 74,  9, 73,   0, 24, 48, 40, 96,120, 80, 72,  0, 24, 48, 40, 96,120, 80, 72,  0, 24, 48, 40, 96,120, 80, 72,  0, 24, 48, 40, 96,120, 80, 72,
  0, 65,  1, 64,  2, 67,  3, 66,  4, 69,  5, 68,  6, 71,  7, 70,  0, 65,  1, 64,  2, 67,  3, 66,  4, 69,  5, 68,  6, 71,  7, 70,   0,  8, 16, 24, 32, 40, 48, 56,  0,  8, 16, 24, 32, 40, 48, 56,  0,  8, 16, 24, 32, 40, 48, 56,  0,  8, 16, 24, 32, 40, 48, 56,
  0, 66,  7, 69, 14, 76,  9, 75, 28, 94, 27, 89, 18, 80, 21, 87,  0, 66,  7, 69, 14, 76,  9, 75, 28, 94, 27, 89, 18, 80, 21, 87,   0, 56,112, 72, 99, 91, 19, 43,  0, 56,112, 72, 99, 91, 19, 43,  0, 56,112, 72, 99, 91, 19, 43,  0, 56,112, 72, 99, 91, 19, 43,
  0, 67,  5, 70, 10, 73, 15, 76, 20, 87, 17, 82, 30, 93, 27, 88,  0, 67,  5, 70, 10, 73, 15, 76, 20, 87, 17, 82, 30, 93, 27, 88,   0, 40, 80,120, 35, 11,115, 91,  0, 40, 80,120, 35, 11,115, 91,  0, 40, 80,120, 35, 11,115, 91,  0, 40, 80,120, 35, 11,115, 91,
  0, 68, 11, 79, 22, 82, 29, 89, 44,104, 39, 99, 58,126, 49,117,  0, 68, 11, 79, 22, 82, 29, 89, 44,104, 39, 99, 58,126, 49,117,   0, 88, 51,107,102, 62, 85, 13,  0, 88, 51,107,102, 62, 85, 13,  0, 88, 51,107,102, 62, 85, 13,  0, 88, 51,107,102, 62, 85, 13,
  0, 69,  9, 76, 18, 87, 27, 94, 36, 97, 45,104, 54,115, 63,122,  0, 69,  9, 76, 18, 87, 27, 94, 36, 97, 45,104, 54,115, 63,122,   0, 72, 19, 91, 38,110, 53,125,  0, 72, 19, 91, 38,110, 53,125,  0, 72, 19, 91, 38,110, 53,125,  0, 72, 19, 91, 38,110, 53,125,
  0, 70, 15, 73, 30, 88, 17, 87, 60,122, 51,117, 34,100, 45,107,  0, 70, 15, 73, 30, 88, 17, 87, 60,122, 51,117, 34,100, 45,107,   0,120,115, 11,101, 29, 22,110,  0,120,115, 11,101, 29, 22,110,  0,120,115, 11,101, 29, 22,110,  0,120,115, 11,101, 29, 22,110,
  0, 71, 13, 74, 26, 93, 23, 80, 52,115, 57,126, 46,105, 35,100,  0, 71, 13, 74, 26, 93, 23, 80, 52,115, 57,126, 46,105, 35,100,   0,104, 83, 59, 37, 77,118, 30,  0,104, 83, 59, 37, 77,118, 30,  0,104, 83, 59, 37, 77,118, 30,  0,104, 83, 59, 37, 77,118, 30,
  0, 72, 19, 91, 38,110, 53,125, 76,  4, 95, 23,106, 34,121, 49,  0, 72, 19, 91, 38,110, 53,125, 76,  4, 95, 23,106, 34,121, 49,   0, 27, 54, 45,108,119, 90, 65,  0, 27, 54, 45,108,119, 90, 65,  0, 27, 54, 45,108,119, 90, 65,  0, 27, 54, 45,108,119, 90, 65,
  0, 73, 17, 88, 34,107, 51,122, 68, 13, 85, 28,102, 47,119, 62,  0, 73, 17, 88, 34,107, 51,122, 68, 13, 85, 28,102, 47,119, 62,   0, 11, 22, 29, 44, 39, 58, 49,  0, 11, 22, 29, 44, 39, 58, 49,  0, 11, 22, 29, 44, 39, 58, 49,  0, 11, 22, 29, 44, 39, 58, 49,
  0, 74, 23, 93, 46,100, 57,115, 92, 22, 75,  1,114, 56,101, 47,  0, 74, 23, 93, 46,100, 57,115, 92, 22, 75,  1,114, 56,101, 47,   0, 59,118, 77,111, 84, 25, 34,  0, 59,118, 77,111, 84, 25, 34,  0, 59,118, 77,111, 84, 25, 34,  0, 59,118, 77,111, 84, 25, 34,
  0, 75, 21, 94, 42, 97, 63,116, 84, 31, 65, 10,126, 53,107, 32,  0, 75, 21, 94, 42, 97, 63,116, 84, 31, 65, 10,126, 53,107, 32,   0, 43, 86,125, 47,  4,121, 82,  0, 43, 86,125, 47,  4,121, 82,  0, 43, 86,125, 47,  4,121, 82,  0, 43, 86,125, 47,  4,121, 82,
  0, 76, 27, 87, 54,122, 45, 97,108, 32,119, 59, 90, 22, 65, 13,  0, 76, 27, 87, 54,122, 45, 97,108, 32,119, 59, 90, 22, 65, 13,   0, 91, 53,110,106, 49, 95,  4,  0, 91, 53,110,106, 49, 95,  4,  0, 91, 53,110,106, 49, 95,  4,  0, 91, 53,110,106, 49, 95,  4,
  0, 77, 25, 84, 50,127, 43,102,100, 41,125, 48, 86, 27, 79,  2,  0, 77, 25, 84, 50,127, 43,102,100, 41,125, 48, 86, 27, 79,  2,   0, 75, 21, 94, 42, 97, 63,116,  0, 75, 21, 94, 42, 97, 63,116,  0, 75, 21, 94, 42, 97, 63,116,  0, 75, 21, 94, 42, 97, 63,116,
  0, 78, 31, 81, 62,112, 33,111,124, 50, 99, 45, 66, 12, 93, 19,  0, 78, 31, 81, 62,112, 33,111,124, 50, 99, 45, 66, 12, 93, 19,   0,123,117, 14,105, 18, 28,103,  0,123,117, 14,105, 18, 28,103,  0,123,117, 14,105, 18, 28,103,  0,123,117, 14,105, 18, 28,103,
  0, 79, 29, 82, 58,117, 39,104,116, 59,105, 38, 78,  1, 83, 28,  0, 79, 29, 82, 58,117, 39,104,116, 59,105, 38, 78,  1, 83, 28,   0,107, 85, 62, 41, 66,124, 23,  0,107, 85, 62, 41, 66,124, 23,  0,107, 85, 62, 41, 66,124, 23,  0,107, 85, 62, 41, 66,124, 23,
  0, 80, 35,115, 70, 22,101, 53, 15, 95, 44,124, 73, 25,106, 58,  0, 80, 35,115, 70, 22,101, 53, 15, 95, 44,124, 73, 25,106, 58,   0, 30, 60, 34,120,102, 68, 90,  0, 30, 60, 34,120,102, 68, 90,  0, 30, 60, 34,120,102, 68, 90,  0, 30, 60, 34,120,102, 68, 90,
  0, 81, 33,112, 66, 19, 99, 50,  7, 86, 38,119, 69, 20,100, 53,  0, 81, 33,112, 66, 19, 99, 50,  7, 86, 38,119, 69, 20,100, 53,   0, 14, 28, 18, 56, 54, 36, 42,  0, 14, 28, 18, 56, 54, 36, 42,  0, 14, 28, 18, 56, 54, 36, 42,  0, 14, 28, 18, 56, 54, 36, 42,
  0, 82, 39,117, 78, 28,105, 59, 31, 77, 56,106, 81,  3,118, 36,  0, 82, 39,117, 78, 28,105, 59, 31, 77, 56,106, 81,  3,118, 36,   0, 62,124, 66,123, 69,  7, 57,  0, 62,124, 66,123, 69,  7, 57,  0, 62,124, 66,123, 69,  7, 57,  0, 62,124, 66,123, 69,  7, 57,
  0, 83, 37,118, 74, 25,111, 60, 23, 68, 50, 97, 93, 14,120, 43,  0, 83, 37,118, 74, 25,111, 60, 23, 68, 50, 97, 93, 14,120, 43,   0, 46, 92,114, 59, 21,103, 73,  0, 46, 92,114, 59, 21,103, 73,  0, 46, 92,114, 59, 21,103, 73,  0, 46, 92,114, 59, 21,103, 73,
  0, 84, 43,127, 86,  2,125, 41, 47,123,  4, 80,121, 45, 82,  6,  0, 84, 43,127, 86,  2,125, 41, 47,123,  4, 80,121, 45, 82,  6,   0, 94, 63, 97,126, 32, 65, 31,  0, 94, 63, 97,126, 32, 65, 31,  0, 94, 63, 97,126, 32, 65, 31,  0, 94, 63, 97,126, 32, 65, 31,
  0, 85, 41,124, 82,  7,123, 46, 39,114, 14, 91,117, 32, 92,  9,  0, 85, 41,124, 82,  7,123, 46, 39,114, 14, 91,117, 32, 92,  9,   0, 78, 31, 81, 62,112, 33,111,  0, 78, 31, 81, 62,112, 33,111,  0, 78, 31, 81, 62,112, 33,111,  0, 78, 31, 81, 62,112, 33,111,
  0, 86, 47,121, 94,  8,113, 39, 63,105, 16, 70, 97, 55, 78, 24,  0, 86, 47,121, 94,  8,113, 39, 63,105, 16, 70, 97, 55, 78, 24,   0,126,127,  1,125,  3,  2,124,  0,126,127,  1,125,  3,  2,124,  0,126,127,  1,125,  3,  2,124,  0,126,127,  1,125,  3,  2,124,
  0, 87, 45,122, 90, 13,119, 32, 55, 96, 26, 77,109, 58, 64, 23,  0, 87, 45,122, 90, 13,119, 32, 55, 96, 26, 77,109, 58, 64, 23,   0,110, 95, 49, 61, 83, 98, 12,  0,110, 95, 49, 61, 83, 98, 12,  0,110, 95, 49, 61, 83, 98, 12,  0,110, 95, 49, 61, 83, 98, 12,
  0, 88, 51,107,102, 62, 85, 13, 79, 23,124, 36, 41,113, 26, 66,  0, 88, 51,107,102, 62, 85, 13, 79, 23,124, 36, 41,113, 26, 66,   0, 29, 58, 39,116,105, 78, 83,  0, 29, 58, 39,116,105, 78, 83,  0, 29, 58, 39,116,105, 78, 83,  0, 29, 58, 39,116,105, 78, 83,
  0, 89, 49,104, 98, 59, 83, 10, 71, 30,118, 47, 37,124, 20, 77,  0, 89, 49,104, 98, 59, 83, 10, 71, 30,118, 47, 37,124, 20, 77,   0, 13, 26, 23, 52, 57, 46, 35,  0, 13, 26, 23, 52, 57, 46, 35,  0, 13, 26, 23, 52, 57, 46, 35,  0, 13, 26, 23, 52, 57, 46, 35,
  0, 90, 55,109,110, 52, 89,  3, 95,  5,104, 50, 49,107,  6, 92,  0, 90, 55,109,110, 52, 89,  3, 95,  5,104, 50, 49,107,  6, 92,   0, 61,122, 71,119, 74, 13, 48,  0, 61,122, 71,119, 74, 13, 48,  0, 61,122, 71,119, 74, 13, 48,  0, 61,122, 71,119, 74, 13, 48,
  0, 91, 53,110,106, 49, 95,  4, 87, 12, 98, 57, 61,102,  8, 83,  0, 91, 53,110,106, 49, 95,  4, 87, 12, 98, 57, 61,102,  8, 83,   0, 45, 90,119, 55, 26,109, 64,  0, 45, 90,119, 55, 26,109, 64,  0, 45, 90,119, 55, 26,109, 64,  0, 45, 90,119, 55, 26,109, 64,
  0, 92, 59,103,118, 42, 77, 17,111, 51, 84,  8, 25, 69, 34,126,  0, 92, 59,103,118, 42, 77, 17,111, 51, 84,  8, 25, 69, 34,126,   0, 93, 57,100,114, 47, 75, 22,  0, 93, 57,100,114, 47, 75, 22,  0, 93, 57,100,114, 47, 75, 22,  0, 93, 57,100,114, 47, 75, 22,
  0, 93, 57,100,114, 47, 75, 22,103, 58, 94,  3, 21, 72, 44,113,  0, 93, 57,100,114, 47, 75, 22,103, 58, 94,  3, 21, 72, 44,113,   0, 77, 25, 84, 50,127, 43,102,  0, 77, 25, 84, 50,127, 43,102,  0, 77, 25, 84, 50,127, 43,102,  0, 77, 25, 84, 50,127, 43,102,
  0, 94, 63, 97,126, 32, 65, 31,127, 33, 64, 30,  1, 95, 62, 96,  0, 94, 63, 97,126, 32, 65, 31,127, 33, 64, 30,  1, 95, 62, 96,   0,125,121,  4,113, 12,  8,117,  0,125,121,  4,113, 12,  8,117,  0,125,121,  4,113, 12,  8,117,  0,125,121,  4,113, 12,  8,117,
  0, 95, 61, 98,122, 37, 71, 24,119, 40, 74, 21, 13, 82, 48,111,  0, 95, 61, 98,122, 37, 71, 24,119, 40, 74, 21, 13, 82, 48,111,   0,109, 89, 52, 49, 92,104,  5,  0,109, 89, 52, 49, 92,104,  5,  0,109, 89, 52, 49, 92,104,  5,  0,109, 89, 52, 49, 92,104,  5,
  0, 96, 67, 35,  5,101, 70, 38, 10,106, 73, 41, 15,111, 76, 44,  0, 96, 67, 35,  5,101, 70, 38, 10,106, 73, 41, 15,111, 76, 44,   0, 20, 40, 60, 80, 68,120,108,  0, 20, 40, 60, 80, 68,120,108,  0, 20, 40, 60, 80, 68,120,108,  0, 20, 40, 60, 80, 68,120,108,
  0, 97, 65, 32,  1, 96, 64, 33,  2, 99, 67, 34,  3, 98, 66, 35,  0, 97, 65, 32,  1, 96, 64, 33,  2, 99, 67, 34,  3, 98, 66, 35,   0,  4,  8, 12, 16, 20, 24, 28,  0,  4,  8, 12, 16, 20, 24, 28,  0,  4,  8, 12, 16, 20, 24, 28,  0,  4,  8, 12, 16, 20, 24, 28,
  0, 98, 71, 37, 13,111, 74, 40, 26,120, 93, 63, 23,117, 80, 50,  0, 98, 71, 37, 13,111, 74, 40, 26,120, 93, 63, 23,117, 80, 50,   0, 52,104, 92, 83,103, 59, 15,  0, 52,104, 92, 83,103, 59, 15,  0, 52,104, 92, 83,103, 59, 15,  0, 52,104, 92, 83,103, 59, 15,
  0, 99, 69, 38,  9,106, 76, 47, 18,113, 87, 52, 27,120, 94, 61,  0, 99, 69, 38,  9,106, 76, 47, 18,113, 87, 52, 27,120, 94, 61,   0, 36, 72,108, 19, 55, 91,127,  0, 36, 72,108, 19, 55, 91,127,  0, 36, 72,108, 19, 55, 91,127,  0, 36, 72,108, 19, 55, 91,127,
  0,100, 75, 47, 21,113, 94, 58, 42, 78, 97,  5, 63, 91,116, 16,  0,100, 75, 47, 21,113, 94, 58, 42, 78, 97,  5, 63, 91,116, 16,   0, 84, 43,127, 86,  2,125, 41,  0, 84, 43,127, 86,  2,125, 41,  0, 84, 43,127, 86,  2,125, 41,  0, 84, 43,127, 86,  2,125, 41,
  0,101, 73, 44, 17,116, 88, 61, 34, 71,107, 14, 51, 86,122, 31,  0,101, 73, 44, 17,116, 88, 61, 34, 71,107, 14, 51, 86,122, 31,   0, 68, 11, 79, 22, 82, 29, 89,  0, 68, 11, 79, 22, 82, 29, 89,  0, 68, 11, 79, 22, 82, 29, 89,  0, 68, 11, 79, 22, 82, 29, 89,
  0,102, 79, 41, 29,123, 82, 52, 58, 92,117, 19, 39, 65,104, 14,  0,102, 79, 41, 29,123, 82, 52, 58, 92,117, 19, 39, 65,104, 14,   0,116,107, 31, 85, 33, 62, 74,  0,116,107, 31, 85, 33, 62, 74,  0,116,107, 31, 85, 33, 62, 74,  0,116,107, 31, 85, 33, 62, 74,
  0,103, 77, 42, 25,126, 84, 51, 50, 85,127, 24, 43, 76,102,  1,  0,103, 77, 42, 25,126, 84, 51, 50, 85,127, 24, 43, 76,102,  1,   0,100, 75, 47, 21,113, 94, 58,  0,100, 75, 47, 21,113, 94, 58,  0,100, 75, 47, 21,113, 94, 58,  0,100, 75, 47, 21,113, 94, 58,
  0,104, 83, 59, 37, 77,118, 30, 74, 34, 25,113,111,  7, 60, 84,  0,104, 83, 59, 37, 77,118, 30, 74, 34, 25,113,111,  7, 60, 84,   0, 23, 46, 57, 92, 75,114,101,  0, 23, 46, 57, 92, 75,114,101,  0, 23, 46, 57, 92, 75,114,101,  0, 23, 46, 57, 92, 75,114,101,
  0,105, 81, 56, 33, 72,112, 25, 66, 43, 19,122, 99, 10, 50, 91,  0,105, 81, 56, 33, 72,112, 25, 66, 43, 19,122, 99, 10, 50, 91,   0,  7, 14,  9, 28, 27, 18, 21,  0,  7, 14,  9, 28, 27, 18, 21,  0,  7, 14,  9, 28, 27, 18, 21,  0,  7, 14,  9, 28, 27, 18, 21,
  0,106, 87, 61, 45, 71,122, 16, 90, 48, 13,103,119, 29, 32, 74,  0,106, 87, 61, 45, 71,122, 16, 90, 48, 13,103,119, 29, 32, 74,   0, 55,110, 89, 95,104, 49,  6,  0, 55,110, 89, 95,104, 49,  6,  0, 55,110, 89, 95,104, 49,  6,  0, 55,110, 89, 95,104, 49,  6,
  0,107, 85, 62, 41, 66,124, 23, 82, 57,  7,108,123, 16, 46, 69,  0,107, 85, 62, 41, 66,124, 23, 82, 57,  7,108,123, 16, 46, 69,   0, 39, 78,105, 31, 56, 81,118,  0, 39, 78,105, 31, 56, 81,118,  0, 39, 78,105, 31, 56, 81,118,  0, 39, 78,105, 31, 56, 81,118,
  0,108, 91, 55, 53, 89,110,  2,106,  6, 49, 93, 95, 51,  4,104,  0,108, 91, 55, 53, 89,110,  2,106,  6, 49, 93, 95, 51,  4,104,   0, 87, 45,122, 90, 13,119, 32,  0, 87, 45,122, 90, 13,119, 32,  0, 87, 45,122, 90, 13,119, 32,  0, 87, 45,122, 90, 13,119, 32,
  0,109, 89, 52, 49, 92,104,  5, 98, 15, 59, 86, 83, 62, 10,103,  0,109, 89, 52, 49, 92,104,  5, 98, 15, 59, 86, 83, 62, 10,103,   0, 71, 13, 74, 26, 93, 23, 80,  0, 71, 13, 74, 26, 93, 23, 80,  0, 71, 13, 74, 26, 93, 23, 80,  0, 71, 13, 74, 26, 93, 23, 80,
  0,110, 95, 49, 61, 83, 98, 12,122, 20, 37, 75, 71, 41, 24,118,  0,110, 95, 49, 61, 83, 98, 12,122, 20, 37, 75, 71, 41, 24,118,   0,119,109, 26, 89, 46, 52, 67,  0,119,109, 26, 89, 46, 52, 67,  0,119,109, 26, 89, 46, 52, 67,  0,119,109, 26, 89, 46, 52, 67,
  0,111, 93, 50, 57, 86,100, 11,114, 29, 47, 64, 75, 36, 22,121,  0,111, 93, 50, 57, 86,100, 11,114, 29, 47, 64, 75, 36, 22,121,   0,103, 77, 42, 25,126, 84, 51,  0,103, 77, 42, 25,126, 84, 51,  0,103, 77, 42, 25,126, 84, 51,  0,103, 77, 42, 25,126, 84, 51,
  0,112, 99, 19, 69, 53, 38, 86,  9,121,106, 26, 76, 60, 47, 95,  0,112, 99, 19, 69, 53, 38, 86,  9,121,106, 26, 76, 60, 47, 95,   0, 18, 36, 54, 72, 90,108,126,  0, 18, 36, 54, 72, 90,108,126,  0, 18, 36, 54, 72, 90,108,126,  0, 18, 36, 54, 72, 90,108,126,
  0,113, 97, 16, 65, 48, 32, 81,  1,112, 96, 17, 64, 49, 33, 80,  0,113, 97, 16, 65, 48, 32, 81,  1,112, 96, 17, 64, 49, 33, 80,   0,  2,  4,  6,  8, 10, 12, 14,  0,  2,  4,  6,  8, 10, 12, 14,  0,  2,  4,  6,  8, 10, 12, 14,  0,  2,  4,  6,  8, 10, 12, 14,
  0,114,103, 21, 77, 63, 42, 88, 25,107,126, 12, 84, 38, 51, 65,  0,114,103, 21, 77, 63, 42, 88, 25,107,126, 12, 84, 38, 51, 65,   0, 50,100, 86, 75,121, 47, 29,  0, 50,100, 86, 75,121, 47, 29,  0, 50,100, 86, 75,121, 47, 29,  0, 50,100, 86, 75,121, 47, 29,
  0,115,101, 22, 73, 58, 44, 95, 17, 98,116,  7, 88, 43, 61, 78,  0,115,101, 22, 73, 58, 44, 95, 17, 98,116,  7, 88, 43, 61, 78,   0, 34, 68,102, 11, 41, 79,109,  0, 34, 68,102, 11, 41, 79,109,  0, 34, 68,102, 11, 41, 79,109,  0, 34, 68,102, 11, 41, 79,109,
  0,116,107, 31, 85, 33, 62, 74, 41, 93, 66, 54,124,  8, 23, 99,  0,116,107, 31, 85, 33, 62, 74, 41, 93, 66, 54,124,  8, 23, 99,   0, 82, 39,117, 78, 28,105, 59,  0, 82, 39,117, 78, 28,105, 59,  0, 82, 39,117, 78, 28,105, 59,  0, 82, 39,117, 78, 28,105, 59,
  0,117,105, 28, 81, 36, 56, 77, 33, 84, 72, 61,112,  5, 25,108,  0,117,105, 28, 81, 36, 56, 77, 33, 84, 72, 61,112,  5, 25,108,   0, 66,  7, 69, 14, 76,  9, 75,  0, 66,  7, 69, 14, 76,  9, 75,  0, 66,  7, 69, 14, 76,  9, 75,  0, 66,  7, 69, 14, 76,  9, 75,
  0,118,111, 25, 93, 43, 50, 68, 57, 79, 86, 32,100, 18, 11,125,  0,118,111, 25, 93, 43, 50, 68, 57, 79, 86, 32,100, 18, 11,125,   0,114,103, 21, 77, 63, 42, 88,  0,114,103, 21, 77, 63, 42, 88,  0,114,103, 21, 77, 63, 42, 88,  0,114,103, 21, 77, 63, 42, 88,
  0,119,109, 26, 89, 46, 52, 67, 49, 70, 92, 43,104, 31,  5,114,  0,119,109, 26, 89, 46, 52, 67, 49, 70, 92, 43,104, 31,  5,114,   0, 98, 71, 37, 13,111, 74, 40,  0, 98, 71, 37, 13,111, 74, 40,  0, 98, 71, 37, 13,111, 74, 40,  0, 98, 71, 37, 13,111, 74, 40,
  0,120,115, 11,101, 29, 22,110, 73, 49, 58, 66, 44, 84, 95, 39,  0,120,115, 11,101, 29, 22,110, 73, 49, 58, 66, 44, 84, 95, 39,   0, 17, 34, 51, 68, 85,102,119,  0, 17, 34, 51, 68, 85,102,119,  0, 17, 34, 51, 68, 85,102,119,  0, 17, 34, 51, 68, 85,102,119,
  0,121,113,  8, 97, 24, 16,105, 65, 56, 48, 73, 32, 89, 81, 40,  0,121,113,  8, 97, 24, 16,105, 65, 56, 48, 73, 32, 89, 81, 40,   0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7,
  0,122,119, 13,109, 23, 26, 96, 89, 35, 46, 84, 52, 78, 67, 57,  0,122,119, 13,109, 23, 26, 96, 89, 35, 46, 84, 52, 78, 67, 57,   0, 49, 98, 83, 71,118, 37, 20,  0, 49, 98, 83, 71,118, 37, 20,  0, 49, 98, 83, 71,118, 37, 20,  0, 49, 98, 83, 71,118, 37, 20,
  0,123,117, 14,105, 18, 28,103, 81, 42, 36, 95, 56, 67, 77, 54,  0,123,117, 14,105, 18, 28,103, 81, 42, 36, 95, 56, 67, 77, 54,   0, 33, 66, 99,  7, 38, 69,100,  0, 33, 66, 99,  7, 38, 69,100,  0, 33, 66, 99,  7, 38, 69,100,  0, 33, 66, 99,  7, 38, 69,100,
  0,124,123,  7,117,  9, 14,114,105, 21, 18,110, 28, 96,103, 27,  0,124,123,  7,117,  9, 14,114,105, 21, 18,110, 28, 96,103, 27,   0, 81, 33,112, 66, 19, 99, 50,  0, 81, 33,112, 66, 19, 99, 50,  0, 81, 33,112, 66, 19, 99, 50,  0, 81, 33,112, 66, 19, 99, 50,
  0,125,121,  4,113, 12,  8,117, 97, 28, 24,101, 16,109,105, 20,  0,125,121,  4,113, 12,  8,117, 97, 28, 24,101, 16,109,105, 20,   0, 65,  1, 64,  2, 67,  3, 66,  0, 65,  1, 64,  2, 67,  3, 66,  0, 65,  1, 64,  2, 67,  3, 66,  0, 65,  1, 64,  2, 67,  3, 66,
  0,126,127,  1,125,  3,  2,124,121,  7,  6,120,  4,122,123,  5,  0,126,127,  1,125,  3,  2,124,121,  7,  6,120,  4,122,123,  5,   0,113, 97, 16, 65, 48, 32, 81,  0,113, 97, 16, 65, 48, 32, 81,  0,113, 97, 16, 65, 48, 32, 81,  0,113, 97, 16, 65, 48, 32, 81,
  0,127,125,  2,121,  6,  4,123,113, 14, 12,115,  8,119,117, 10,  0,127,125,  2,121,  6,  4,123,113, 14, 12,115,  8,119,117, 10,   0, 97, 65, 32,  1, 96, 64, 33,  0, 97, 65, 32,  1, 96, 64, 33,  0, 97, 65, 32,  1, 96, 64, 33,  0, 97, 65, 32,  1, 96, 64, 33}; 
	
	__m256i *Table = (__m256i*) table;
	alignas(32) static unsigned char mask[32] = {15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15};
	__m256i *Mask = (__m256i*) mask;
	
	*Out = _mm256_xor_si256(*Out, _mm256_shuffle_epi8(Table[((uint32_t)b)*2  ],_mm256_and_si256(*Mask,A)));
	*Out = _mm256_xor_si256(*Out, _mm256_shuffle_epi8(Table[((uint32_t)b)*2+1],_mm256_and_si256(*Mask,_mm256_srli_epi16(A,4))));
}

/*
	Given a __m256i value containing 32 field elements, this function multiplies each element by x in constant time.
*/
static inline
void mulByX(__m256i *A){
	__m256i Temp;
	alignas(32) static unsigned char table[2*32] = {0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,  0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,   0, 32, 64, 96,  3, 35, 67, 99,  0, 32, 64, 96,  3, 35, 67, 99,  0, 32, 64, 96,  3, 35, 67, 99,  0, 32, 64, 96,  3, 35, 67, 99};
  __m256i *Table = (__m256i*) table;
	alignas(32) static unsigned char mask[32] = {15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15};
	__m256i *Mask = (__m256i*) mask;

	Temp = _mm256_shuffle_epi8(Table[0],_mm256_and_si256(*Mask,*A));
	*A = _mm256_xor_si256(Temp, _mm256_shuffle_epi8(Table[1],_mm256_and_si256(*Mask,_mm256_srli_epi16(*A,4))));
}

/*
	Given two __m256i values A and B, each containing 32 field elements, this function computes their entrywise product, and adds it to Out, in constant time
*/
static inline
void mulAVX(__m256i A, __m256i B , __m256i *Out){
	__m256i mask0 = _mm256_set1_epi8(0x01);
	__m256i mask1 = _mm256_set1_epi8(0x02);
	__m256i mask2 = _mm256_set1_epi8(0x04);
	__m256i mask3 = _mm256_set1_epi8(0x08);
	__m256i mask4 = _mm256_set1_epi8(0x10);
	__m256i mask5 = _mm256_set1_epi8(0x20);
	__m256i mask6 = _mm256_set1_epi8(0x40);

	__m256i T;

	T = _mm256_and_si256(A,mask0);
	T = _mm256_cmpeq_epi8(T,_mm256_setzero_si256());
	*Out = _mm256_xor_si256(*Out, _mm256_andnot_si256(T,B));

	mulByX(&B);
	T = _mm256_and_si256(A,mask1);
	T = _mm256_cmpeq_epi8(T,_mm256_setzero_si256());
	*Out = _mm256_xor_si256(*Out, _mm256_andnot_si256(T,B));

	mulByX(&B);
	T = _mm256_and_si256(A,mask2);
	T = _mm256_cmpeq_epi8(T,_mm256_setzero_si256());
	*Out = _mm256_xor_si256(*Out, _mm256_andnot_si256(T,B));

	mulByX(&B);
	T = _mm256_and_si256(A,mask3);
	T = _mm256_cmpeq_epi8(T,_mm256_setzero_si256());
	*Out = _mm256_xor_si256(*Out, _mm256_andnot_si256(T,B));

	mulByX(&B);
	T = _mm256_and_si256(A,mask4);
	T = _mm256_cmpeq_epi8(T,_mm256_setzero_si256());
	*Out = _mm256_xor_si256(*Out, _mm256_andnot_si256(T,B));

	mulByX(&B);
	T = _mm256_and_si256(A,mask5);
	T = _mm256_cmpeq_epi8(T,_mm256_setzero_si256());
	*Out = _mm256_xor_si256(*Out, _mm256_andnot_si256(T,B));

	mulByX(&B);
	T = _mm256_and_si256(A,mask6);
	T = _mm256_cmpeq_epi8(T,_mm256_setzero_si256());
	*Out = _mm256_xor_si256(*Out, _mm256_andnot_si256(T,B));
}

/*
	Does the same as scalerMul, but without accessing tables at secret indiced.
*/
static inline
void scalarMul_ct(__m256i *Out, __m256i A, FELT b){
	mulAVX(A,_mm256_set1_epi8(b),Out);
}

/*
	Unscrambles the permutated result produced by addScalarProductAVX and addScalarProduct3AVX
*/
static inline
void permute(__m256i *In, FELT *Out){
	int i,j;
	for(i=0;i<8;i++){
		for(j=0; j<4;j++){
			Out[i+j*8   ] = ((FELT*)&In[0])[j+4*i];
			Out[i+j*8+32] = ((FELT*)&In[1])[j+4*i];
			#if OIL_VARS >64
			Out[i+j*8+64] = ((FELT*)&In[2])[j+4*i];
			#endif
			#if OIL_VARS >96
			Out[i+j*8+96] = ((FELT*)&In[3])[j+4*i];
			#endif
		}
	}
}

#if OIL_VARS <= 64

/*
	xors the halves of data in the idx0 and idx1 indices of Out0 and Out1.
*/
static inline
void gatherscatter(unsigned idx0, unsigned idx1, uint64_t Out0[256], uint64_t Out1[256], __m128i data) {
    __m128i temp = _mm_loadl_epi64((__m128i*)&Out0[idx0]);
    temp = _mm_castps_si128(_mm_loadh_pi(_mm_castsi128_ps(temp), (__m64*)&Out1[idx1]));
    temp = _mm_xor_si128(temp, data);

    _mm_storel_epi64((__m128i*)&Out0[idx0], temp);
    _mm_storeh_pi((__m64*)&Out1[idx1], _mm_castsi128_ps(temp));
}

/*
	Given a list of bitcontainers and a list of bitconatiners, this function xors the i-th bitcontainer in the Indices[i]-th bitcontainer of Out
*/
static inline
void accumulateCols(uint8_t *Indices, const bitcontainer *data, size_t len, bitcontainer Out[4][256])
{
	while( (unsigned long) data & 15){
		Out[0][*(Indices++)] ^= *(data++);
		len --;
	}
	
	size_t i;
    for (i = 0 ; i<len/4*4 ; i+=4) {
        __m128i vd = _mm_load_si128((const __m128i*)&data[i]);
        gatherscatter(Indices[i+0], Indices[i+1], Out[0], Out[1], vd);
        
        vd = _mm_load_si128((const __m128i*)&data[i+2]);
        gatherscatter(Indices[i+2], Indices[i+3], Out[2], Out[3], vd);
    }

    data += len/4*4;
	for(;i<len;i++){
		Out[0][Indices[i]] ^= *(data++);
	}
}

#else

/*
	Given a list of bitcontainers adn a list of bitconatiners, this function xors the i-th bitcontainer in the Indices[i]-th bitcontainer of Out
*/
static inline
void accumulateCols(uint8_t *Indices, const bitcontainer *data, size_t len, bitcontainer Out[4][256])
{
	size_t i;
    for (i = 0 ; i<len/4*4 ; i+=4) {
    	Out[0][Indices[i+0]] ^= data[i]; 
        Out[1][Indices[i+1]] ^= data[i+1]; 
        Out[2][Indices[i+2]] ^= data[i+2]; 
        Out[3][Indices[i+3]] ^= data[i+3]; 
    }
    for (;i<len;i++){
    	Out[0][Indices[i]] ^= data[i]; 
    }
}
#endif

/*
	Given a list of n scalar elements, this function produces a list of n tables for scalar multiplication by each of the field elements in constant time.
*/
static inline 
void prepareTables(__m256i *Out , FELT* scalars , int n){
	int i,j;
	for (i = 0; i < n; i+= 32)
	{
		__m256i Table[64];
		__m256i *S = (__m256i *) &scalars[i];
		
		__m256i Temp1[16] = {{0}};
		__m256i Temp2[16] = {{0}};
		for (j = 0; j < 16; j++){
			scalarMul(&Temp1[j],*S,j);
			scalarMul(&Temp2[j],*S,j<<4);
		}

		for(j=0;j<16;j++){
			Table[j]    = _mm256_permute2x128_si256(Temp1[j],Temp2[j],0x20);
			Table[16+j] = _mm256_permute2x128_si256(Temp1[j],Temp2[j],0x31);
		}

		for(j=0;j<8;j++){
			Table[j+32] = _mm256_unpacklo_epi8(Table[2*j+ 0],Table[2*j+ 1]);
			Table[j+40] = _mm256_unpackhi_epi8(Table[2*j+ 0],Table[2*j+ 1]);
			Table[j+48] = _mm256_unpacklo_epi8(Table[2*j+16],Table[2*j+17]);
			Table[j+56] = _mm256_unpackhi_epi8(Table[2*j+16],Table[2*j+17]);
		}

		for(j=0;j<4;j++){
			Table[j+ 0] = _mm256_unpacklo_epi16(Table[2*j+32],Table[2*j+33]);
			Table[j+ 4] = _mm256_unpackhi_epi16(Table[2*j+32],Table[2*j+33]);
			Table[j+ 8] = _mm256_unpacklo_epi16(Table[2*j+40],Table[2*j+41]);
			Table[j+12] = _mm256_unpackhi_epi16(Table[2*j+40],Table[2*j+41]);
			Table[j+16] = _mm256_unpacklo_epi16(Table[2*j+48],Table[2*j+49]);
			Table[j+20] = _mm256_unpackhi_epi16(Table[2*j+48],Table[2*j+49]);
			Table[j+24] = _mm256_unpacklo_epi16(Table[2*j+56],Table[2*j+57]);
			Table[j+28] = _mm256_unpackhi_epi16(Table[2*j+56],Table[2*j+57]);
		}

		for(j=0;j<2;j++){
			Table[j+32] = _mm256_unpacklo_epi32(Table[2*j+ 0],Table[2*j+ 1]);
			Table[j+34] = _mm256_unpackhi_epi32(Table[2*j+ 0],Table[2*j+ 1]);
			Table[j+36] = _mm256_unpacklo_epi32(Table[2*j+ 4],Table[2*j+ 5]);
			Table[j+38] = _mm256_unpackhi_epi32(Table[2*j+ 4],Table[2*j+ 5]);
			Table[j+40] = _mm256_unpacklo_epi32(Table[2*j+ 8],Table[2*j+ 9]);
			Table[j+42] = _mm256_unpackhi_epi32(Table[2*j+ 8],Table[2*j+ 9]);
			Table[j+44] = _mm256_unpacklo_epi32(Table[2*j+12],Table[2*j+13]);
			Table[j+46] = _mm256_unpackhi_epi32(Table[2*j+12],Table[2*j+13]);
			Table[j+48] = _mm256_unpacklo_epi32(Table[2*j+16],Table[2*j+17]);
			Table[j+50] = _mm256_unpackhi_epi32(Table[2*j+16],Table[2*j+17]);
			Table[j+52] = _mm256_unpacklo_epi32(Table[2*j+20],Table[2*j+21]);
			Table[j+54] = _mm256_unpackhi_epi32(Table[2*j+20],Table[2*j+21]);
			Table[j+56] = _mm256_unpacklo_epi32(Table[2*j+24],Table[2*j+25]);
			Table[j+58] = _mm256_unpackhi_epi32(Table[2*j+24],Table[2*j+25]);
			Table[j+60] = _mm256_unpacklo_epi32(Table[2*j+28],Table[2*j+29]);
			Table[j+62] = _mm256_unpackhi_epi32(Table[2*j+28],Table[2*j+29]);
		}

		for(j=0;j<32;j+=2){
			Table[j+0] = _mm256_unpacklo_epi64(Table[j+32],Table[j+33]); 
			Table[j+1] = _mm256_unpackhi_epi64(Table[j+32],Table[j+33]); 
		}

		for(j=0;j<32;j++){
			Out[2*i+2*j] = _mm256_permute2x128_si256(Table[j],_mm256_setzero_si256(),0x00);
			Out[2*i+2*j+1] = _mm256_permute2x128_si256(Table[j],_mm256_setzero_si256(),0x11);
		}
	}
}
#endif